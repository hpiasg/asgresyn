package de.uni_potsdam.hpi.asg.resyntool.synthesis.data;

/*
 * Copyright (C) 2016 Norman Kluge
 * 
 * This file is part of ASGresyn.
 * 
 * ASGresyn is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * ASGresyn is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ASGresyn.  If not, see <http://www.gnu.org/licenses/>.
 */

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import de.uni_potsdam.hpi.asg.common.iohelper.FileHelper;
import de.uni_potsdam.hpi.asg.common.iohelper.WorkingdirGenerator;
import de.uni_potsdam.hpi.asg.common.technology.SyncTool;

public class ScriptGenerator {

    public static final String  v_file              = ".v";

    // generated by SimFlow
    public static final String  dc_sh_file          = "_dpopt.sh";
    public static final String  dc_tcl_file         = "_dpopt.tcl";

    // generated by scripts of SimFlow
    public static final String  dc_v_file           = "_dpopt.v";
    public static final String  dc_log_file         = "_dpopt.log";

    public static final Pattern module_pattern      = Pattern.compile("module (.*) \\(.*");
    public static final File    dc_sh_templatefile  = FileHelper.getInstance().getBasedirFile("templates/resyn_dpopt.sh");
    public static final File    dc_tcl_templatefile = FileHelper.getInstance().getBasedirFile("templates/resyn_dpopt.tcl");

    private String              name;
    private String              root;
    private File                localfile;
    private String              localfolder;
    private SyncTool            synclib;

    public ScriptGenerator(String arg_origfile, SyncTool synclib) {
        localfolder = WorkingdirGenerator.getInstance().getWorkingdir();
        localfile = new File(localfolder + arg_origfile);
        name = localfile.getName().split("\\.")[0];
        root = getRoot(localfile);
        this.synclib = synclib;
    }

    public DataOptimisationPlan generate() {

        String rmdcshfile = name + dc_sh_file;
        String dcshfile = localfolder + rmdcshfile;
        FileHelper.getInstance().copyfile(dc_sh_templatefile, new File(dcshfile));
        replaceAll(localfolder + name + dc_sh_file);

        String dctclfile = localfolder + name + dc_tcl_file;
        FileHelper.getInstance().copyfile(dc_tcl_templatefile, new File(dctclfile));
        replaceAll(localfolder + name + dc_tcl_file);

        DataOptimisationPlan retVal = new DataOptimisationPlan(localfile.getAbsolutePath(), localfile.getName());
        retVal.setLocalshfilename(dcshfile);
        retVal.setRemoteshfilename(rmdcshfile);
        retVal.setLocaltclfilename(dctclfile);
        retVal.setOptimisedfilename(name + dc_v_file);
        return retVal;
    }

    private void replaceAll(String filename) {
        try {
            File f = new File(filename);
            List<String> out = new ArrayList<String>();
            BufferedReader reader = new BufferedReader(new FileReader(f));
            String line = null;
            while((line = reader.readLine()) != null) {
                line = line.replace("#*orig*#", name + v_file);
                line = line.replace("#*dc_sh*#", name + dc_sh_file);
                line = line.replace("#*dc_tcl*#", name + dc_tcl_file);
                line = line.replace("#*dc_v*#", name + dc_v_file);
                line = line.replace("#*dc_log*#", name + dc_log_file);
                line = line.replace("#*root*#", root);
                line = line.replace("#*search_path*#", synclib.getSearchPaths());
                line = line.replace("#*libraries*#", synclib.getLibraries());

                out.add(line);
            }
            reader.close();
            FileHelper.getInstance().writeFile(new File(filename), out);
        } catch(IOException e) {
            e.printStackTrace();
        }
    }

    private String getRoot(File f) {
        String root = null;
        try {
            BufferedReader reader = new BufferedReader(new FileReader(f));
            String line = null;
            Matcher matcher = null;
            while((line = reader.readLine()) != null) {
                matcher = module_pattern.matcher(line);
                if(matcher.matches()) {
                    root = matcher.group(1);
                }
            }
            reader.close();
        } catch(IOException e) {
            System.out.println(e.getMessage());
            return null;
        }
        return root;
    }
}
